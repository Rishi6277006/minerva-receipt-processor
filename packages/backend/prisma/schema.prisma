// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  emailConnections UserEmailConnection[]
  ledgerEntries    LedgerEntry[]

  @@map("users")
}

model UserEmailConnection {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  emailProvider String   // 'gmail', 'outlook', 'yahoo', etc.
  emailAddress  String
  
  // OAuth tokens (encrypted)
  accessToken   String?
  refreshToken  String?
  expiresAt     DateTime?
  
  // Manual IMAP settings (encrypted)
  imapHost      String?
  imapPort      Int?
  imapPassword  String?
  
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, emailProvider])
  @@map("user_email_connections")
}

model LedgerEntry {
  id              String    @id @default(uuid())
  userId          String?   // Optional - for user-specific entries
  user            User?     @relation(fields: [userId], references: [id])
  
  vendor          String
  amount          Float
  currency        String    @default("USD")
  transactionDate DateTime  @map("transaction_date")
  category        String? // Optional category
  description     String? // Optional description from receipt
  receiptUrl      String? // URL or path to the original PDF receipt
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("ledger_entries")
}

model BankTransaction {
  id              String    @id @default(uuid())
  description     String
  amount          Float
  transactionDate DateTime  @map("transaction_date")
  type            String? // e.g., DEBIT, CREDIT
  sourceFile      String? // Name of the CSV file it originated from
  createdAt       DateTime  @default(now()) @map("created_at")

  @@map("bank_transactions")
}
